declare module "ytm-client-api" {
	export interface PlayerApi {
		// Player API Types
		addEventListener: (...args: any[]) => any;
		removeEventListener: () => any;
		destroy: () => any;
		getLastError: () => any;
		getPlayerType: () => any;
		getCurrentVideoConfig: () => any;
		loadNewVideoConfig: () => any;
		isReady: () => any;
		cueVideoByPlayerVars: () => any;
		loadVideoByPlayerVars: () => any;
		preloadVideoByPlayerVars: () => any;
		loadVideoById: () => any;
		loadVideoByUrl: () => any;
		playVideo: () => any;
		loadPlaylist: () => any;
		nextVideo: () => any;
		previousVideo: () => any;
		playVideoAt: () => any;
		getVideoData: () => any;
		seekBy: (value: number) => any;
		seekTo: (value: number) => any;
		showControls: () => any;
		hideControls: () => any;
		cancelPlayback: () => any;
		getProgressState: () => any;
		isInline: () => any;
		setInline: (...args: any[]) => void;
		setLoopVideo: (...args: any[]) => void;
		getLoopVideo: () => any;
		getVideoContentRect: () => any;
		getVideoStats: () => any;
		getCurrentTime: () => any;
		getDuration: () => any;
		getPlayerState: () => any;
		getVideoLoadedFraction: () => any;
		mute: () => any;
		unMute: () => any;
		setVolume: (...args: any[]) => void;
		loadModule: () => any;
		unloadModule: () => any;
		getOption: () => any;
		getOptions: () => any;
		setOption: (...args: any[]) => void;
		addCueRange: (...args: any[]) => any;
		getDebugText: () => any;
		getStoryboardFormat: () => any;
		toggleFullscreen: () => any;
		isFullscreen: () => any;
		getPlayerSize: () => any;
		toggleSubtitles: () => any;
		setCenterCrop: (...args: any[]) => void;
		setFauxFullscreen: (...args: any[]) => void;
		setSizeStyle: (...args: any[]) => void;
		handleGlobalKeyDown: () => any;
		handleGlobalKeyUp: () => any;
		cueVideoById: () => any;
		cueVideoByUrl: () => any;
		pauseVideo: () => any;
		stopVideo: () => any;
		clearVideo: () => any;
		getVideoBytesLoaded: () => any;
		getVideoBytesTotal: () => any;
		getVideoStartBytes: () => any;
		cuePlaylist: () => any;
		setShuffle: (...args: any[]) => void;
		setLoop: (...args: any[]) => void;
		getPlaylist: () => any;
		getPlaylistIndex: () => any;
		getPlaylistId: () => any;
		isMuted: () => any;
		getVolume: () => any;
		getPlayerMode: () => any;
		getAvailablePlaybackRates: () => any;
		getPlaybackQuality: () => any;
		setPlaybackQuality: (...args: any[]) => void;
		getAvailableQualityLevels: () => any;
		removeCueRange: () => any;
		setSize: (...args: any[]) => void;
		getApiInterface: () => any;
		mutedAutoplay: () => any;
		getVideoEmbedCode: () => any;
		getVideoUrl: () => any;
		getMediaReferenceTime: () => any;
		getSize: () => any;
		logImaAdEvent: () => any;
		preloadVideoById: () => any;
		wakeUpControls: () => any;
		showVideoInfo: () => any;
		hideVideoInfo: () => any;
		isVideoInfoVisible: () => any;
		getPlaybackRate: () => any;
		setPlaybackRate: (...args: any[]) => void;
		getSphericalProperties: () => any;
		setSphericalProperties: (...args: any[]) => void;
		getInternalApiInterface: () => any;
		getAdState: () => any;
		sendAbandonmentPing: () => any;
		setLoopRange: (...args: any[]) => void;
		getLoopRange: () => any;
		setAutonavState: (...args: any[]) => void;
		seekToLiveHead: () => any;
		requestSeekToWallTimeSeconds: () => any;
		seekToStreamTime: () => any;
		startSeekCsiAction: () => any;
		getStreamTimeOffset: () => any;
		setInlinePreview: (...args: any[]) => void;
		getAppState: () => any;
		updateLastActiveTime: () => any;
		setBlackout: (...args: any[]) => void;
		setUserEngagement: (...args: any[]) => void;
		updateSubtitlesUserSettings: () => any;
		getPresentingPlayerType: () => any;
		canPlayType: () => any;
		updatePlaylist: () => any;
		updateVideoData: () => any;
		updateEnvironmentData: () => any;
		sendVideoStatsEngageEvent: () => any;
		productsInVideoVisibilityUpdated: () => any;
		setSafetyMode: (...args: any[]) => void;
		isAtLiveHead: () => any;
		getVideoAspectRatio: () => any;
		getPreferredQuality: () => any;
		getPlaybackQualityLabel: () => any;
		setPlaybackQualityRange: (...args: any[]) => void;
		onAdUxClicked: () => any;
		getFeedbackProductData: () => any;
		getStoryboardFrame: () => any;
		getStoryboardFrameIndex: () => any;
		getStoryboardLevel: () => any;
		getNumberOfStoryboardLevels: () => any;
		getCaptionWindowContainerId: () => any;
		getAvailableQualityLabels: () => any;
		addUtcCueRange: (...args: any[]) => any;
		showAirplayPicker: () => any;
		dispatchReduxAction: () => any;
		getPlayerResponse: () => any;
		getWatchNextResponse: () => any;
		getHeartbeatResponse: () => any;
		getPlayerStateObject: () => any;
		getWebPlayerContextConfig: () => any;
		notifyShortsAdSwipeEvent: () => any;
		setSqueezeback: (...args: any[]) => void;
		toggleSubtitlesOn: () => any;
		isSubtitlesOn: () => any;
		reportPlaybackIssue: () => any;
		setAutonav: (...args: any[]) => void;
		isNotServable: () => any;
		channelSubscribed: () => any;
		channelSubscribed: unknown;
		togglePictureInPicture: () => any;
		supportsGaplessAudio: () => any;
		supportsGaplessShorts: () => any;
		enqueueVideoByPlayerVars: () => any;
		clearQueue: () => any;
		getAudioTrack: () => any;
		setAudioTrack: (...args: any[]) => void;
		getAvailableAudioTracks: () => any;
		getMaxPlaybackQuality: () => any;
		getUserPlaybackQualityPreference: () => any;
		getSubtitlesUserSettings: () => any;
		resetSubtitlesUserSettings: () => any;
		setMinimized: (...args: any[]) => void;
		setOverlayVisibility: (...args: any[]) => void;
		confirmYpcRental: () => any;
		queueNextVideo: () => any;
		handleExternalCall: () => any;
		logApiCall: () => any;
		isExternalMethodAvailable: () => any;
		setScreenLayer: (...args: any[]) => void;
		getCurrentPlaylistSequence: () => any;
		getPlaylistSequenceForTime: () => any;
		highlightSettingsMenuItem: () => any;
		openSettingsMenuItem: () => any;
		getEmbeddedPlayerResponse: () => any;
		getVisibilityState: () => any;
		isMutedByMutedAutoplay: () => any;
		isMutedByEmbedsMutedAutoplay: () => any;
		setGlobalCrop: (...args: any[]) => void;
		setInternalSize: (...args: any[]) => void;
		setAppFullscreen: (...args: any[]) => void;
		createClientVe: () => any;
		createServerVe: () => any;
		destroyVe: () => any;
		hasVe: () => any;
		logClick: () => any;
		logVisibility: () => any;
		setTrackingParams: (...args: any[]) => void;
		setAccountLinkState: (...args: any[]) => void;
		updateAccountLinkingConfig: () => any;
		getAvailableQualityData: () => any;
		setCompositeParam: (...args: any[]) => void;
		getStatsForNerds: () => any;
		updateFullerscreenEduButtonSubtleModeState: () => any;
		updateFullerscreenEduButtonVisibility: () => any;
		addEmbedsConversionTrackingParams: (...args: any[]) => any;
		queueOfflineAction: () => any;
		updateDownloadState: () => any;
		pauseVideoDownload: () => any;
		resumeVideoDownload: () => any;
		isOrchestrationLeader: () => any;
		refreshAllStaleEntities: () => any;
		setUpPositionSyncInterval: (...args: any[]) => void;
		musicDisableUi: () => any;
		musicEnableUi: () => any;
		isLifaAdPlaying: () => any;
		insertTimelyActionUi: () => any;
		setCreatorEndscreenVisibility: (...args: any[]) => void;
		setCreatorEndscreenHideButton: (...args: any[]) => void;
	}
}
